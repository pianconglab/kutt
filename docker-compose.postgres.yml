# Kutt 短链接服务 - Docker Compose 配置文件
# 使用 PostgreSQL 作为数据库，Redis 作为缓存
# 官方镜像部署，无需本地构建

services:
  # Kutt 主应用服务
  server:
    container_name: ${KUTT_CONTAINER_NAME}               # 容器名称（从 .env 读取）
    # 使用官方 Docker 镜像，版本可在 .env 中配置
    image: ${KUTT_IMAGE}                                 # 镜像名称（从 .env 读取）
    # 容器异常退出时自动重启
    restart: ${RESTART_POLICY}                           # 重启策略（从 .env 读取）
    # 数据卷挂载 - 持久化自定义文件
    volumes:
      # 自定义主题、样式、图片等文件的持久化存储
      - ./data/custom:/kutt/custom
    # 环境变量配置
    environment:
        # === 数据库配置 ===
        DB_CLIENT: ${DB_CLIENT}                          # 数据库客户端类型（从 .env 读取）
        DB_HOST: ${DB_HOST}                              # 数据库主机名（从 .env 读取）
        DB_PORT: ${DB_PORT}                              # 数据库端口（从 .env 读取）
        DB_NAME: ${DB_NAME}                              # 数据库名称（从 .env 读取）
        DB_USER: ${DB_USER}                              # 数据库用户名（从 .env 读取）
        DB_PASSWORD: ${DB_PASSWORD}                      # 数据库密码（从 .env 读取）

        # === 缓存配置 ===
        REDIS_ENABLED: ${REDIS_ENABLED}                  # 启用 Redis 缓存（从 .env 读取）
        REDIS_HOST: ${REDIS_HOST}                        # Redis 主机名（从 .env 读取）
        REDIS_PORT: ${REDIS_PORT}                        # Redis 端口（从 .env 读取）

        # === 应用核心配置 ===
        JWT_SECRET: ${JWT_SECRET}                        # JWT 签名密钥（从 .env 读取）
        SITE_NAME: ${SITE_NAME}                          # 网站名称（从 .env 读取）
        DEFAULT_DOMAIN: ${DEFAULT_DOMAIN}                # 默认域名（从 .env 读取）
        PORT: ${PORT}                                    # 应用内部端口（从 .env 读取）

        # === 功能控制配置 ===
        DISALLOW_REGISTRATION: ${DISALLOW_REGISTRATION}          # 是否禁用用户注册（从 .env 读取）
        DISALLOW_ANONYMOUS_LINKS: ${DISALLOW_ANONYMOUS_LINKS}    # 是否禁用匿名创建链接（从 .env 读取）

        # === 网络和安全配置 ===
        TRUST_PROXY: ${TRUST_PROXY}                     # 信任代理服务器（从 .env 读取）
        CUSTOM_DOMAIN_USE_HTTPS: ${CUSTOM_DOMAIN_USE_HTTPS}     # 自定义域名使用 HTTPS（从 .env 读取）
    # 端口映射：主机端口:容器端口
    ports:
      - "${HOST_PORT}:${CONTAINER_PORT}"                 # 端口映射（从 .env 读取）
    # 服务依赖关系
    depends_on:
      postgres:
        condition: service_healthy  # 等待 PostgreSQL 健康检查通过
      redis:
        condition: service_started  # 等待 Redis 启动完成
  # PostgreSQL 数据库服务
  postgres:
    container_name: ${POSTGRES_CONTAINER_NAME}           # 容器名称（从 .env 读取）
    # 使用官方 PostgreSQL 镜像，版本可在 .env 中配置
    image: ${POSTGRES_IMAGE}                             # 镜像名称（从 .env 读取）
    # 容器异常退出时自动重启
    restart: ${RESTART_POLICY}                           # 重启策略（从 .env 读取）
    # 数据卷挂载 - 持久化数据库数据
    volumes:
      # PostgreSQL 数据文件持久化存储
      # 重要：删除此目录将导致所有数据丢失！
      - ./data/postgres:/var/lib/postgresql/data
    # 数据库环境变量配置
    environment:
      POSTGRES_DB: ${DB_NAME}                            # 创建的数据库名称（从 .env 读取）
      POSTGRES_USER: ${DB_USER}                          # 数据库用户名（从 .env 读取）
      POSTGRES_PASSWORD: ${DB_PASSWORD}                  # 数据库密码（从 .env 读取）
      # 设置数据库字符编码为 UTF-8
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS}      # 初始化参数（从 .env 读取）
    # 仅在容器网络内暴露端口（不映射到主机）
    expose:
      - "${DB_PORT}"                                     # 数据库端口（从 .env 读取）
    # 健康检查配置
    healthcheck:
      # 检查数据库是否准备就绪
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: ${POSTGRES_HEALTH_INTERVAL}              # 健康检查间隔（从 .env 读取）
      timeout: ${POSTGRES_HEALTH_TIMEOUT}               # 超时时间（从 .env 读取）
      retries: ${POSTGRES_HEALTH_RETRIES}               # 重试次数（从 .env 读取）
      start_period: ${POSTGRES_HEALTH_START_PERIOD}     # 启动等待时间（从 .env 读取）
  # Redis 缓存服务
  redis:
    container_name: ${REDIS_CONTAINER_NAME}              # 容器名称（从 .env 读取）
    # 使用官方 Redis Alpine 镜像，版本可在 .env 中配置
    image: ${REDIS_IMAGE}                                # 镜像名称（从 .env 读取）
    # 容器异常退出时自动重启
    restart: ${RESTART_POLICY}                           # 重启策略（从 .env 读取）
    # Redis 启动命令配置
    command: ${REDIS_COMMAND}                            # Redis 启动命令（从 .env 读取）
    # 数据卷挂载 - 持久化缓存数据
    volumes:
      # Redis 数据文件持久化存储（AOF 和 RDB 文件）
      - ./data/redis:/data
    # 仅在容器网络内暴露端口（不映射到主机）
    expose:
      - "${REDIS_PORT}"                                  # Redis 端口（从 .env 读取）
    # 健康检查配置
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${REDIS_HEALTH_INTERVAL}                 # 健康检查间隔（从 .env 读取）
      timeout: ${REDIS_HEALTH_TIMEOUT}                  # 超时时间（从 .env 读取）
      retries: ${REDIS_HEALTH_RETRIES}                  # 重试次数（从 .env 读取）
      start_period: ${REDIS_HEALTH_START_PERIOD}        # 启动等待时间（从 .env 读取）

# 数据卷定义
volumes:
  # 自定义文件卷（可选，如果不使用可以删除）
  custom:
    driver: local

# 网络配置
networks:
  default:
    name: ${NETWORK_NAME}                                # 网络名称（从 .env 读取）
    driver: ${NETWORK_DRIVER}                            # 网络驱动（从 .env 读取）
